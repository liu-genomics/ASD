write.table(b, "d.txt", col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
length(d)
write.table(d, "d.txt", col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
length(a)
dim(enhancer_overlap_dnase[enhancer_overlap_dnase$V7 >= quantile(enhancer_overlap_dnase$V7,seq(0,1,0.1))[10],])
e = unique(enhancer_overlap_dnase[enhancer_overlap_dnase$V7 >= quantile(enhancer_overlap_dnase$V7,seq(0,1,0.1))[10] & abs(enhancer_overlap_dnase$Distance.to.TSS) < 50000,]$Gene.Name)
write.table(e, "e.txt", col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
length(e)
e = unique(enhancer_overlap_dnase[enhancer_overlap_dnase$V7 >= quantile(enhancer_overlap_dnase$V7,seq(0,1,0.1))[10] & abs(enhancer_overlap_dnase$Distance.to.TSS) < 10kb,]$Gene.Name)
e = unique(enhancer_overlap_dnase[enhancer_overlap_dnase$V7 >= quantile(enhancer_overlap_dnase$V7,seq(0,1,0.1))[10] & abs(enhancer_overlap_dnase$Distance.to.TSS) < 10000,]$Gene.Name)
length(e)
write.table(e, "e.txt", col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
top_enhancer_not_overlap_dnase = enhancer_not_overlap_dnase[1:1500,]
head(top_enhancer_not_overlap_dnase)
f = unique(top_enhancer_not_overlap_dnase[abs(top_enhancer_not_overlap_dnase$Distance.to.TSS)<10000,]$Gene.Name)
length(f)
write.table(f, "f.txt", col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
top_enhancer_not_overlap_dnase = enhancer_not_overlap_dnase[1:5000,]
f = unique(top_enhancer_not_overlap_dnase[abs(top_enhancer_not_overlap_dnase$Distance.to.TSS)<10000,]$Gene.Name)
length(f)
write.table(f, "f.txt", col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
length(b)
length(c)
length(a)
enhancer_overlap_dnase = enhancer_overlap_dnase[order(enhancer_overlap_dnase$V7, decreasing = TRUE),]
head(enhancer_overlap_dnase)
g =  unique(enhancer_overlap_dnase[1:2000,]$Gene.Name)
write.table(g, "g.txt", col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
h = unique(enhancer_not_overlap_dnase[1:2000,]$Gene.Name)
write.table(h, "h.txt", col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
i = setdiff(h,g)
length(i)
length(g)
write.table(i, "i.txt", col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
ggsave("R4.pdf", marrangeGrob(grobs = list(c,d), nrow=6, ncol=2))
ggsave("R4.eps", marrangeGrob(grobs = list(c[[1]],c[[2]]), nrow=6, ncol=2))
c = plot_signal_all_features("combined_notolarge_q0.05_peaks_open_in_GSM816637.20kb.100bp", "GSM816637_hg19.narrowPeak_not_overlap_combined_notolarge_q0.05_peaks_random_10000.20kb.100bp","rmdup", "Open active","Open inactive",normalizing_f_rmdup, ymin_vector, ymax_vector)
setwd("/media/yuwen/Elements/Enhancer_Seq_manuscript/integrative_analysis/histone_marks_signal_distribution/")
c = plot_signal_all_features("combined_notolarge_q0.05_peaks_open_in_GSM816637.20kb.100bp", "GSM816637_hg19.narrowPeak_not_overlap_combined_notolarge_q0.05_peaks_random_10000.20kb.100bp","rmdup", "Open active","Open inactive",normalizing_f_rmdup, ymin_vector, ymax_vector)
ggsave("R4.eps", marrangeGrob(grobs = list(c[[1]],c[[2]]), nrow=6, ncol=2))
ggsave("R4.eps", marrangeGrob(grobs = c(c[[1]],c[[2]]), nrow=6, ncol=2))
?ggsave
a = plot_signal_all_features("combined_notolarge_q0.05_peaks_open_in_GSM816637.20kb.100bp", "hg19_random.20kb.100bp","rmdup", "Open active","Random",normalizing_f_rmdup, ymin_vector, ymax_vector)
b = plot_signal_all_features("combined_notolarge_q0.05_peaks_not_open_in_GSM816637_random_10000.20kb.100bp", "hg19_random.20kb.100bp","rmdup", "Closed active","Random",normalizing_f_rmdup, ymin_vector, ymax_vector)
g <- arrangeGrob(a,b nrow=3) #generates g
g <- arrangeGrob(list(a,b), nrow=3) #generates g
ggsave(file="whatever.pdf", g)
g <- arrangeGrob(a, nrow=3) #generates g
ggsave(file="whatever.pdf", g)
g <- arrangeGrob(a[[1]],a[[2]],a[[3]] nrow=3) #generates g
a[[1]]
g <- arrangeGrob(a[[1]],a[[2]],a[[3]], nrow=3) #generates g
ggsave(file="whatever.pdf", g)
a[[1]][1]
a[[1]][1]
a[[1]]
a[[2]]
postscript("R3.eps",width = 560,height = 1440)
do.call(grid.arrange, c(a, b, list(nrow=6,layout_matrix = lay)))
dev.off()
?postscript()
postscript("R3.eps",width = 560,height = 1440, paer = "a4")
postscript("R3.eps",width = 560,height = 1440, paper = "a4")
do.call(grid.arrange, c(a, b, list(nrow=6,layout_matrix = lay)))
dev.off()
postscript("R3.eps",width = 560,height = 3000, paper = "a4")
do.call(grid.arrange, c(a, b, list(nrow=6,layout_matrix = lay)))
dev.off()
?arrangeGrob
?multiplot
multiplot(c,col =2 )
multiplot(c[[1]],c[[2]],c[[3]],col =2 )
multiplot(plotlist = c,col =2 )
multiplot(plotlist = list(c,d),col =2 )
multiplot(plotlist = d,col =2 )
multiplot(plotlist = list(a,b),col =2 )
multiplot(plotlist = a,col =2 )
multiplot(plotlist = b,col =2 )
?multiplot
?arrageGrob
?arrangeGrob
lay
g <- arrangeGrob(grobs = append(a,b), layout_matrix = lay) #generates g
ggsave(file="whatever.pdf", g)
multiplot(plotlist = append(a,b),col =2 )
multiplot(plotlist = append(a,b), layout = lay)
postscript("R3.eps",width = 560,height = 3000, paper = "a4")
multiplot(plotlist = append(a,b), layout = lay)
dev.off()
?multiplot
postscript("R3.eps",width = 10,height = 20, paper = "a4")
multiplot(plotlist = append(a,b), layout = lay)
dev.off()
postscript("R3.eps",width = 10,height = 20, paper = "a4")
multiplot(plotlist = append(a[[1]],b[[1]]), col = 2)
multiplot(plotlist = append(a[[1]],b[[1]]))
multiplot(plotlist = list(a[[1]],b[[1]]))
dev.off()
postscript("R3.eps",width = 10,height = 20, paper = "a4")
multiplot(plotlist = list(a[[1]],b[[1]]))
dev.off()
postscript("R3.eps",width = 10,height = 200, paper = "a4")
multiplot(plotlist = list(a[[1]],b[[1]]))
dev.off()
?postscript
g <- arrangeGrob(grobs = append(a,b), layout_matrix = lay) #generates g
ggsave(file="whatever.pdf", g)
postscript("R3.eps",width = 10,height = 40)
multiplot(plotlist = list(a[[1]],b[[1]]))
dev.off()
pdf("R3.pdf",width = 10,height = 40)
multiplot(plotlist = list(a[[1]],b[[1]]))
dev.off()
pdf("R3.pdf",width = 8,height = 25)
multiplot(plotlist = append(a,b))
dev.off()
pdf("R3.pdf",width = 8,height = 25)
multiplot(plotlist = append(a,b), layout = lay)
dev.off()
a = plot_signal_all_features("combined_notolarge_q0.05_peaks_open_in_GSM816637.20kb.100bp", "hg19_random.20kb.100bp","rmdup", "Open active","Random",normalizing_f_rmdup, ymin_vector, ymax_vector)
b = plot_signal_all_features("combined_notolarge_q0.05_peaks_not_open_in_GSM816637_random_10000.20kb.100bp", "hg19_random.20kb.100bp","rmdup", "Closed active","Random",normalizing_f_rmdup, ymin_vector, ymax_vector)
a
normalizing_f_rmdup
23.3/76.7
normalizing_f_rmdup= c(51.8/76.7,23.6/158.7,28.8/76.7,9.6/76.7,33.0/76.7,23.3/76.7)
a = plot_signal_all_features("combined_notolarge_q0.05_peaks_open_in_GSM816637.20kb.100bp", "hg19_random.20kb.100bp","rmdup", "Open active","Random",normalizing_f_rmdup, ymin_vector, ymax_vector)
b = plot_signal_all_features("combined_notolarge_q0.05_peaks_not_open_in_GSM816637_random_10000.20kb.100bp", "hg19_random.20kb.100bp","rmdup", "Closed active","Random",normalizing_f_rmdup, ymin_vector, ymax_vector)
pdf("R3.pdf",width = 8,height = 12)
multiplot(plotlist = append(a,b), layout = lay)
dev.off()
postscript("R3.eps",width = 8,height = 12)
multiplot(plotlist = append(a,b), layout = lay)
dev.off()
?multiplot
library(Rmisc)
setwd("/media/yuwen/Elements/160825_drug_resistant/analysis/")
drugv15 = read.delim("../processed_files/160725_Zifeng_drugVMEFgenelist_genome_drugv15mer.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
drugv19 = read.delim("../processed_files/160725_Zifeng_drugVMEFgenelist_genome_drugv19mer.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
MEF15 = read.delim("../processed_files/160725_Zifeng_drugVMEFgenelist_genome_MEF15mer.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
MEF19 = read.delim("../processed_files/160725_Zifeng_drugVMEFgenelist_genome_MEF19mer.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
head(drugv15)
phyper(4,20,100,5,lower.tail = FALSE)
test = data.frame(a = NA, b = NA)
test[1,] = c(0,3)
test[2,] = c(0,3)
head(drugv19)
dim(drugv19)
669*1000/18000
106/18000*481
test = read.delim("../resource/known_drug_gene_list/Garraway_siRNA_screening_2013_all_genes.table", header = TRUE, sep = "\t", stringsAsFactors = FALSe)
test = read.delim("../resource/known_drug_gene_list/Garraway_siRNA_screening_2013_all_genes.table", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
dim(test)
head(test)
a = test[test$p.value<0.05,]
dim(a)
head(a)
write.table(a$Gene, "../resource/known_drug_gene_list/Garraway_siRNA_screening_2013_p0.05_genes.genelist", col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
stringent_ASD = c(coding_tada[coding_tada$qvalue.combined<0.3,2],SFRAI_gene_high_confidence[,1],SFRAI_gene_strong_candidate[,1],AutismKB_gene[,1],Betancur_gene[,1])
head(stringent_ASD)
strigent_ASD[strigent_ASD == "BCL11A"]
stringent_ASD[stringent_ASD == "BCL11A"]
85/(85+890)
0.08718*0.85*2/(0.08718+0.85)
?eelement_text
?element_text
scale_color_continuous
?scale_color_continuous
1133/56435*9842
198968-14537
25821+139708
a=matrix(0,2,2)
dim(a)[2]
library(ggplot2)
library(Rmisc)
#function to return a data.frame that could be used to draw plots
orgnize_table <-function(data, m = dim(data)[2], name = NA, range = seq(-100,100,1)){
#data is a table in which each column represents under one condition the counts of 5' end of reads across -100 to +100 of hydroxymethylation sites
# m is how many conditions you want to put into one table
# name is a vector giving the names for each condition
# range is the range of base-distance upstream and downstream to methylation sites
colnames(data) = name
data = data.frame(data, position = range)
data2 = as.data.frame(cbind(apply(data[,1:m],2,function(x){x/sum(x)}),position = data$position)) # normalize for each column of the first 5
data2 = reshape(data2, varying = list(1:m),v.names = "count",idvar = "position",times = name,direction = "long")
data1 = reshape(data, varying = list(1:m),v.names = "count",idvar = "position",times = name,direction = "long")
data1$time = factor(data1$time, levels = name)
data2$time = factor(data2$time, levels = name)
list(original = data1, normalized = data2)
}
draw_plot_together <-function(test){
#test is the list returned from organize_table function
# will draw two plots, one is from original number, the other is from normalized data
ggplot(aes(x = position, y = count, color = time), data = test$original)+geom_line()+scale_color_discrete(guide = guide_legend(title = "Condition"))+xlim(-50,50)+theme_classic()+theme(axis.text.x = element_text(size =10, color = "black",hjust = 1, vjust = 1), axis.text.y = element_text(size =10, color = "black"),legend.position = c(.9, .8))+xlab("Distance")+ylab("Count")
ggplot(aes(x = position, y = count, color = time), data = test$normalized)+geom_line()+scale_color_discrete(guide = guide_legend(title = "Condition"))+xlim(-50,50)+theme_classic()+theme(axis.text.x = element_text(size =10, color = "black",hjust = 1, vjust = 1), axis.text.y = element_text(size =10, color = "black"),legend.position = c(.9, .8))+xlab("Distance")+ylab("Count")
}
draw_plot_separate <- function(test){
#test is the list returned from organize_table function
# will separated plots from normalized data and original data, one set of plots is from original number, the other is from normalized data
plots <- list()  # new empty list
for (i in 1:length(unique(test$original$time))) {
p1 = ggplot(aes(x = position, y = count), data = test$original[test$original$time == conditions[i],])+geom_line()+ggtitle(conditions[i])+xlim(-50,50)+theme_classic()+theme(axis.text.x = element_text(size =10, color = "black", hjust = 1, vjust = 1), axis.text.y = element_text(size =10, color = "black"))
plots[[i]] <- p1  # add each plot into plot list
}
multiplot(plotlist = plots, cols = 2)
plots <- list()  # new empty list
for (i in 1:length(unique(test$normalized$time))) {
p1 = ggplot(aes(x = position, y = count), data = test$normazlied[test$normalized$time == conditions[i],])+geom_line()+ggtitle(conditions[i])+xlim(-50,50)+theme_classic()+theme(axis.text.x = element_text(size =10, color = "black", hjust = 1, vjust = 1), axis.text.y = element_text(size =10, color = "black"))
plots[[i]] <- p1  # add each plot into plot list
}
multiplot(plotlist = plots, cols = 2)
}
setwd("/media/yuwen/Elements/Tiao_Seq/analysis")
mc5_48_plus = read.delim("../data/Data/160620/He-Lu-6_5mC-jump-48ng-S6_L004_R1_001.adaptor_removed.bam.plus_sites_with_1_coverage.ave.perbase", header = FALSE, sep = "\t", stringsAsFactors = FALSE)
mc5_24_plus = read.delim("../data/Data/160620/He-Lu-7_5mC-jump-24ng-S7_L004_R1_001.adaptor_removed.bam.plus_sites_with_1_coverage.ave.perbase", header = FALSE, sep = "\t", stringsAsFactors = FALSE)
mc5_12_plus = read.delim("../data/Data/160620/He-Lu-8_5mc-jump-12ng-S8_L004_R1_001.adaptor_removed.bam.plus_sites_with_1_coverage.ave.perbase", header = FALSE, sep = "\t", stringsAsFactors = FALSE)
mc5_6_plus = read.delim("../data/Data/160620/He-Lu-9_5mc-jump-6ng-S9_L004_R1_001.adaptor_removed.bam.plus_sites_with_1_coverage.ave.perbase", header = FALSE, sep = "\t", stringsAsFactors = FALSE)
mc5_2.4_plus = read.delim("../data/Data/160620/He-Lu-10_5mc-jump-2.4ng-S10_L004_R1_001.adaptor_removed.bam.plus_sites_with_1_coverage.ave.perbase", header = FALSE, sep = "\t", stringsAsFactors = FALSE)
mc5_plus = cbind(mc5_48_plus,mc5_24_plus,mc5_12_plus,mc5_6_plus,mc5_2.4_plus)
test = orgnize_table(mc5_plus)
test = data.frame(a= seq(1,10,1),b=seq(1,10,1))
test
test$a
test[['a']]
test[[a]]
coding_tada = read.delim("/media/yuwen/F/ASD/integrating_all_data/Xin_ASD_genelist/TADA_SNV_CNV_combined_Feb7.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
head(coding_data)
head(coding_tada)
as.numeric("200")
length(seq(-98,101,1))
test <- function(a,b = a^2){}
test <- function(a,b = a^2){
a+b}
test(5)
rm(list=ls())
load("/media/yuwen/F/ASD/data/0703_region_list_080216_data_matrix.Rdata")
ls()
dim(data_matrix)
dim(region_names)
regions_names
region_names
motif_names
score_names
head(data_matrix)
previous = new.env()
load("/media/yuwen/F/ASD/160229_new_control_integrating_all_data/160229_all_data_burden_analysis_v2.Rdata", envir = previous)
head(previous$mutation)
head(data_matrix[,1:10])
head(data_matrix[,1:12])
head(data_matrix[,1:13])
head(data_matrix[,1:14])
head(previous$mutation)
head(previous$CADD_score)
length(previous$CADD_score)
length(previous$CADD_score[,1])
head(previous$gerp)
head(previous$gerp_gt2)
gerp = data.frame(NA,NA,NA, data_matrix$ID, NA, NA, NA, data_matrix$GERP)
dim(gerp)
head(gerp)
head(previous$mut_eigen)
?commandArgs
test = data.frame(seq(1,10,1),"a")
test
ls()
head(motif_names)
head(data_matrix)
range(data_matrix$Noonan_brain_motif_top50pct_expressed_motif.txt.ref_alt.3.m.pvalue)
quanbile(data_matrix$Noonan_brain_motif_top50pct_expressed_motif.txt.ref_alt.3.m.pvalue,c(0.8))
quantile(data_matrix$Noonan_brain_motif_top50pct_expressed_motif.txt.ref_alt.3.m.pvalue,c(0.8))
quantile(data_matrix$Noonan_brain_motif_top50pct_expressed_motif.txt.ref_alt.3.m.pvalue,c(0.9))
quantile(data_matrix$Noonan_brain_motif_top50pct_expressed_motif.txt.ref_alt.3.m.pvalue,c(0.95))
summary(data_matrix$Noonan_brain_motif_top50pct_expressed_motif.txt.ref_alt.3.m.pvalue)
jaspar_2014_motif_q0.1_dummy = as.numeric(data_matrix$Noonan_brain_motif_top50pct_expressed_motif.txt.ref_alt.3.m.pvalue)
head(jaspar_2014_motif_q0.1_dummy)
motif_pct_cutoff = 0.9
jaspar_2014_motif_q0.1_dummy = as.numeric(data_matrix$Noonan_brain_motif_top50pct_expressed_motif.txt.ref_alt.3.m.pvalue >= motif_pct_cutoff)
head(jaspar_2014_motif_q0.1_dummy)
head(data_matrix$Noonan_brain_motif_top50pct_expressed_motif.txt.ref_alt.3.m.pvalue)
head(previous$phylop)
head(previous$fitcons)
head(data_matrix[,1:12])
head(data_matrix[,1:14])
table(data_matrix$Prediction)
paste("a","a")
paste("a","a",sep = "")
paste("a","a","a",sep = "")
exp=read.delim("/media/yuwen/F/ASD/integrating_all_data/brain_span_expression/expression_matrix.csv",header = FALSE,sep = ",",stringsAsFactors = FALSE)
gene=read.delim("/media/yuwen/F/ASD/integrating_all_data/brain_span_expression/rows_metadata.csv",header = TRUE,sep = ",",stringsAsFactors = FALSE,)
exp_mean = apply(exp[,2:525],1,mean)
gene_with_exp_mean = data.frame(gene$gene_symbol, exp_mean = exp_mean)
#consider all genes, not limited to genes within TADA table
brainspan = new.env()
load("/media/yuwen/F/ASD/integrating_all_data/systematic_study_burden/160206_brainspan_expression.Rdata", envir = brainspan)
length(brainspan$gene_qt1)
length(brainspan$gene_qt1[,1])
gene_with_exp_mean = data.frame(gene$gene_symbol, exp_mean = exp_mean)
#consider all genes, not limited to genes within TADA table
exp_quantile = as.vector(quantile(gene_with_exp_mean[,2], seq(0,1,0.25)))
gene_qt1 = gene_with_exp_mean[gene_with_exp_mean[,2] >= exp_quantile[1] & gene_with_exp_mean[,2] < exp_quantile[2],1]
gene_qt2 = gene_with_exp_mean[gene_with_exp_mean[,2] >= exp_quantile[2] & gene_with_exp_mean[,2] < exp_quantile[3],1]
gene_qt3 = gene_with_exp_mean[gene_with_exp_mean[,2] >= exp_quantile[3] & gene_with_exp_mean[,2] < exp_quantile[4],1]
gene_qt4 = gene_with_exp_mean[gene_with_exp_mean[,2] >= exp_quantile[4] & gene_with_exp_mean[,2] < exp_quantile[5],1]
length(gene_qt1[,1])
length(gene_qt1)
ls(brainpsan)
length(brainspan$gene_qt1[,1])
length(brainspan$gene_qt2[,1])
length(brainspan$gene_qt3[,1])
length(brainspan$gene_qt4[,1])
head(Huang_Hpi_score)
pwd()
getwd()
coding_tada = read.delim("../other_annotation/gene_list/TADA_SNV_CNV_combined_Feb7.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
coding_tada = read.delim("../other_annotation/gene_list/TADA_SNV_CNV_combined_Feb7.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
setwd("/media/yuwen/F/ASD/analysis/)
""
)
"
setwd("/media/yuwen/F/ASD/analysis/")
coding_tada = read.delim("../other_annotation/gene_list/TADA_SNV_CNV_combined_Feb7.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
coding_tada_denovo = data.frame(coding_tada$RefSeqName, coding_tada$TadaName, coding_tada$mut.rate, coding_tada$dn.LoF, coding_tada$dn.mis3, coding_tada$BF.SNV.dn, coding_tada$BF.combined, coding_tada$qvalue.combined)
colnames(coding_tada_denovo) = c("RefSeqName", "TadaName", "mut.rate", "dn.LoF", "dn.mis3", "BF.SNV.dn", "BF.combined", "qvalue.combined")
brainspan = new.env()
load("../other_annotation/brainspan/160206_brainspan_expression.Rdata", envir = brainspan)
##########################Function to calculate burden ############################################
burden <- function (data){ # calculate SNV burden
#data is a two columns data matrix, where 1st column is mutation ID, 2nd column is assigned gene
a = intersect(data[,1], ASD_effective_SNV_ID)
b = intersect(data[,1], control_effective_SNV_ID)
c(length(a), length(b), (length(a)/length(ASD_effective_SNV_ID))/(length(b)/length(control_effective_SNV_ID)))
}
################ Function to calculate burden given a mutation overlap feature file and a exp cutoff ##################
burden_by_brainspan <- function(data, lower_bound, upper_bound){
genes_in_range = brainspan$gene_with_mutrate[brainspan$gene_with_mutrate$exp_mean >= lower_bound
& brainspan$gene_with_mutrate$exp_mean <= upper_bound
& !is.na(gene_with_mutrate$exp_mean),]$gene
data = data[is.element(data[,2],genes_in_range),]
list(burden = burden(data), mut = data) #also return mutations after filtering.
}
##############function to calculate burden given a mutatio overlap motif #######################################
burden_with_motif <- function(data, motif_dummy){#motif dummy variable 1/0 for the original mutation file (mutation$mutation)
motif_index = mutation$mutation[motif_dummy == 1,]$index
data = data[is.element(data[,1], motif_index),]
list(burden = burden(data), mut = data) #also return mutations after filtering.
}
##############function to calculate burden given a motif_gain or motif break #######################################
burden_with_motif_alt <- function(data, motif_alt_index){
data = data[is.element(data[,1], motif_alt_index),]
list(burden = burden(data), mut = data) #also return mutations after filtering.
}
##############function to calculate burden given a Fitcons score cutoff #######################################
burden_with_fitcons <- function(data, fitcons, lowerbound, upperbound){
fitcons_index = fitcons[fitcons[,6] <= upperbound & fitcons[,6] >= lowerbound, 1]
data = data[is.element(data[,1], fitcons_index),]
list(burden = burden(data), mut = data) #also return mutations after filtering.
}
#############function calculate burden given a mutation eigen score cutoff ##############################
burden_with_eigen <-function(data, mut_eigen, lowerbound){
eigen_index = mutation$mutation[mut_eigen >= lowerbound & !is.na(mut_eigen),]$index
data = data[is.element(data[,1], eigen_index),]
list(burden = burden(data), mut = data) #also return mutations after filtering.
}
##############function to calculate burden given a mutation overlap motif or fitcons > 0.125#######################################
burden_with_fitcons_or_motif <- function(data, fitcons,lowerbound, upperbound, motif_dummy){
fitcons_index = fitcons[fitcons[,6] <= upperbound & fitcons[,6] >= lowerbound, 1]
motif_index = mutation$mutation[motif_dummy == 1,]$index
data = data[is.element(data[,1], c(fitcons_index, motif_index)),]
list(burden = burden(data), mut = data) #also return mutations after filtering.
}
##############function to calculate burden given a mutation overlap motif or CADD_score > certain number  #######################################
burden_with_CADD_or_motif <- function(data, CADD_score,lowerbound, upperbound, motif_dummy){
CADD_index = CADD_score[CADD_score[,2] >=  lowerbound & CADD_score[,2] <= upperbound & !is.na(CADD_score[,2]),1]
motif_index = mutation$mutation[motif_dummy == 1,]$index
data = data[is.element(data[,1], c(CADD_index, motif_index)),]
list(burden = burden(data), mut = data) #also return mutations after filtering.
}
##############function to calculate burden given a PhyloP score cutoff #######################################
burden_with_phylop <- function(data, phylop, lowerbound, upperbound){
phylop_index = phylop[phylop[,6] <= upperbound & phylop[,6] >= lowerbound, 1]
data = data[is.element(data[,1], phylop_index),]
list(burden = burden(data), mut = data) #also return mutations after filtering.
}
##############function to calculate burden given a CADD score cutoff #######################################
CADD_score_with_index = data.frame(seq(1:length(mutation$mutation[,1])),mutation$CADD_score[,1])
burden_with_CADD <- function(data, CADD_score, lowerbound, upperbound){#CADD score is a data.frame with only one column
CADD_index = CADD_score[CADD_score[,2] >=  lowerbound & CADD_score[,2] <= upperbound & !is.na(CADD_score[,2]),1]
data = data[is.element(data[,1], CADD_index),]
list(burden = burden(data), mut = data) #also return mutations after filtering.
mutation = new.env()
load("../data/0703_region_list_080216_data_matrixtransformed_for_old_code.Rdata", envir = mutation)
"
)
))ADF
,,,,,,,,,
sdfs
{}F
quit()
]
}
)
.
,]
]]]]
==
1/0
dsfdsfdasfasdfawefewafweaf
sdsfds`]
load("/media/yuwen/F/ASD/160229_new_control_integrating_all_data/160229_all_data_burden_analysis_v2.Rdata")
head(CADD_score)
summary(CADD_score)
head(phylop)
summary(phylop[,1])
summary(phylop[,5])
summary(phylop[,4])
rm(list=ls())
load("/media/yuwen/F/ASD/data/0703_region_list_080216_data_matrix.Rdata")
ls()
load("/media/yuwen/F/ASD/data/161026_Stephen_Scherer_Gemomic_Medicine_ASD_de_novo_SNVs_germline_with_NC_control_data_matrix.Rdata")
ls()
head(data_matrix[,1:13])
rm(list=ls())
load("/media/yuwen/F/ASD/data/debug_region_list_073116_data_matrix.Rdata")
head(data_matrix[,1:13])
rm(list=ls())
coding_tada = read.delim("../other_annotation/gene_list/TADA_SNV_CNV_combined_Feb7.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
setwd("/media/yuwen/F/ASD/analysis/")
coding_tada = read.delim("../other_annotation/gene_list/TADA_SNV_CNV_combined_Feb7.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
coding_tada_denovo = data.frame(coding_tada$RefSeqName, coding_tada$TadaName, coding_tada$mut.rate, coding_tada$dn.LoF, coding_tada$dn.mis3, coding_tada$BF.SNV.dn, coding_tada$BF.combined, coding_tada$qvalue.combined)
colnames(coding_tada_denovo) = c("RefSeqName", "TadaName", "mut.rate", "dn.LoF", "dn.mis3", "BF.SNV.dn", "BF.combined", "qvalue.combined")
#read in workspace that has unique mutation information
mutation = new.env()
load("../data/debug_region_list_073116_data_matrixtransformed_for_old_code.Rdata", envir = mutation)
write.table(mutation$mutation[,1:4],"160229_data_for_analysis.bed",col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
# load releant functions
source("../lib/160930_screen_burden_functions_test_more_genelist_focused.R")
plot_summary <- data.frame(gene_list = NA, score = NA, cutoff = NA, burden = NA, CI_low = NA, CI_up = NA, pvalue = NA, asd_sub = NA, control_sub = NA, bed = NA, region_tag = NA)
temp = generate_mut_enhancer_pair_for_burden_analysis("160229_data_for_analysis.bed","../other_annotation/epigenomic_annotation/Whole_genome.promoter_1kb_genename.bed")
temp1 = show_burden_for_selected_features_with_geneset_CG_corrected(temp,input_type = "table",ref = "self", geneset = stringent_ASD)
temp1 = data.frame(lapply(translate_to_plotting_v2(temp1, "Whole_genome", "Promoter","stringent_ASD"), function(y) if(is.numeric(y)) round(y, 3) else y))
temp2 = show_burden_for_selected_features_with_geneset_CG_corrected(temp,input_type = "table",ref = "self", geneset = ID_genes)
temp2 = data.frame(lapply(translate_to_plotting_v2(temp2, "Whole_genome", "Promoter","ID_genes"), function(y) if(is.numeric(y)) round(y, 3) else y))
temp3 = show_burden_for_selected_features_with_geneset_CG_corrected(temp,input_type = "table",ref = "self", geneset = SCZ_composite)
temp3 = data.frame(lapply(translate_to_plotting_v2(temp3, "Whole_genome", "Promoter","SCZ_composite"), function(y) if(is.numeric(y)) round(y, 3) else y))
temp4 = show_burden_for_selected_features_with_geneset_CG_corrected(temp,input_type = "table",ref = "self", geneset = relaxed_ASD)
temp4 = data.frame(lapply(translate_to_plotting_v2(temp4, "Whole_genome", "Promoter","NP_genes"), function(y) if(is.numeric(y)) round(y, 3) else y))
plot_summary <- do.call("rbind",list(plot_summary, temp1,temp2,temp3,temp4))
dim(plot_summary)
dim(temp1)
head(temp1)
test = rep("acda",1000)
grepl("ac",test[1,1])
grepl("ac",test[1])
?mapply
mapply(function(x,y){grepl(y,x)}, test, MoreArgs = {y="ac"})
mapply(function(x,y){grepl(y,x)}, test, MoreArgs = list(y="ac")}
mapply(function(x,y) grepl(y,x), test, MoreArgs = list(y="ac"))
sum(mapply(function(x,y) grepl(y,x), test, MoreArgs = list(y="ac")))
test = rep("acda",10000000)
length(test)
sum(mapply(function(x,y) grepl(y,x), test, MoreArgs = list(y="ac")))
333/374
361/423
120/423
20000000/3000000000
20000000/(3000000000/4)
setwd("/media/yuwen/F/ASD/code/")
rm(list=ls())
mut_file = "../analysis/160229_data_for_analysis.bed"
window_file = "../other_annotation/epigenomic_annotation/Whole_genome.promoter_yanyu_10kb_exons.50bp_window.bed"
cg_file = "../other_annotation/epigenomic_annotation/Whole_genome.promoter_yanyu_10kb_exons.50bp_window.bed.fasta.cg"
mut = read.delim(mut_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
head(mut)
mut[,2] = mut[,2] - 1  # change 1-based start to 0-based start.
write.table(mut, paste(prefix,"_temp.bed", sep = ""), col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
prefix=system("date +%s", intern = TRUE) # prefix for temporary files that will be deleted at the end of the pipeline
write.table(mut, paste(prefix,"_temp.bed", sep = ""), col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
command = paste("bedtools intersect -a ", paste(prefix,"_temp.bed", sep = ""), " -b ", window_file, " -wa -wb > ", paste(prefix,"_temp_intersection.bed", sep = ""), sep = "")
command
system(command)
command = paste("bedtools coverage -a ", paste(prefix,"_temp.bed", sep = ""), " -b ", window_file, " > ", paste(prefix,"_temp_coverage.bed", sep = ""), sep = "")
command
coverage = system(command, intern = TRUE)
head(coverage)
command = paste("bedtools coverage -a ", paste(prefix,"_temp.bed", sep = ""), " -b ", window_file, sep = "")
coverage = system(command, intern = TRUE)
head(coverage)
coverage = read.delim(paste(prefix,"_temp_coverage.bed", sep = ""), header = FALSE, sep = "\t", stringsAsFactors = FALSE)
head(coverage)
window = read.delim(window_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
cg = read.delim(cg_file, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
dim(cg)
head(cg)
head(window)
colnames(cg) = c("site_index", "cg")
head(coverage)
coverage = coverage[,1:5]
colnames(coverage) = c("chr","start","end","site_index","mut_count")
head(coverage)
coverage$window_size = coverage$end - coverage$start
head(coverage)
coverage = merge(coverage, cg, by.x = "sites_index", by.y ="site_index")
coverage = merge(coverage, cg, by.x = "site_index", by.y ="site_index")
dim(coverage)
head(coverage)
grepl("asd","asdfd")
grepl("asd","asdfd")
coverage$coding = as.numeric(mapply(function(x,y) grepl(y,x),coverage$site_index, MoreArgs = list(y="coding")))
head(coverage)
coverage$promoter = as.numeric(mapply(function(x,y) grepl(y,x),coverage$site_index, MoreArgs = list(y="promoter")))
coverage$nf = as.numeric(mapply(function(x,y) grepl(y,x),coverage$site_index, MoreArgs = list(y="nf")))
head(coverage)
save.image("161117_temp.Rdata")
